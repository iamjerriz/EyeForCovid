{"version":3,"sources":["components/InfoBox.js","util.js","components/Map/Map.js","components/SidePanel/Table.js","components/SidePanel/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","printStat","stat","numeral","format","printStatTotal","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","console","log","FormControl","Select","variant","onChange","event","countryCode","target","MenuItem","key","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f9f2d87f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tclassName={`info-box ${active && 'infobox-selected'} ${\r\n\t\t\t\tisRed && 'infobox-selectRed'\r\n\t\t\t}`}\r\n\t\t\tonClick={props.onClick}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className='infobox-title' color='textSecondary'>\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<h2 className={`infobox-cases ${!isRed && 'infobox-case-green'}`}>\r\n\t\t\t\t\t{cases}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<Typography className='infobox-total' color='textSecondary'>\r\n\t\t\t\t\tTotal <br />\r\n\t\t\t\t\t{total}\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\n//circle color\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: '#cc1034',\r\n\t\tmultiplier: 800,\r\n\t},\r\n\r\n\trecovered: {\r\n\t\thex: '#7dd71d',\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\r\n\tdeaths: {\r\n\t\thex: '#fb4443',\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\n\r\n//sort sidepanel data\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\tsortedData.sort((a, b) => {\r\n\t\tif (a.cases > b.cases) {\r\n\t\t\treturn -1;\r\n\t\t} else {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t});\r\n\treturn sortedData;\r\n};\r\n\r\n//\r\nexport const printStat = (stat) =>\r\n\tstat ? `+${numeral(stat).format('0,0')}` : '+0';\r\n\r\nexport const printStatTotal = (stat) =>\r\n\tstat ? `${numeral(stat).format('0,0')}` : '+0';\r\n\r\n// interactive map circle map\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n\t\t\t}>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className='popup-container'>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName='popup-flag'\r\n\t\t\t\t\t\tstyle={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className='popup-countryname'>{country.country}</div>\r\n\t\t\t\t\t<div className='popup-cases'>\r\n\t\t\t\t\t\tCases: {numeral(country.cases).format('0,0')}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='popup-recovered'>\r\n\t\t\t\t\t\tRecovered: {numeral(country.recovered).format('0,0')}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='pop-deaths'>\r\n\t\t\t\t\t\tDeaths: {numeral(country.deaths).format('0,0')}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n\r\nexport default sortData;\r\n","import React from 'react';\r\nimport './map.css';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport { showDataOnMap } from '../../util';\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n\treturn (\r\n\t\t<div className='map'>\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\nfunction Table({ countries }) {\r\n\treturn (\r\n\t\t<div className='table'>\r\n\t\t\t{countries.map(({ country, cases }) => (\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{numeral(cases).format(0, 0)}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false,\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0,\r\n\t\t},\r\n\t},\r\n\tmaintainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: 'index',\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function (tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format('+0,0');\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'time',\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: 'MM/DD/YY',\r\n\t\t\t\t\ttooltipFormat: 'll',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\t// Include a dollar sign in the ticks\r\n\t\t\t\t\tcallback: function (value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format('0a');\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n\tlet chartData = [];\r\n\tlet lastDataPoint;\r\n\tfor (let date in data.cases) {\r\n\t\tif (lastDataPoint) {\r\n\t\t\tlet newDataPoint = {\r\n\t\t\t\tx: date,\r\n\t\t\t\ty: data[casesType][date] - lastDataPoint,\r\n\t\t\t};\r\n\t\t\tchartData.push(newDataPoint);\r\n\t\t}\r\n\t\tlastDataPoint = data[casesType][date];\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n\tconst [data, setData] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tlet chartData = buildChartData(data, casesType);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t\t// console.log(chartData);\r\n\t\t\t\t\t// buildChart(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{data?.length > 0 && (\r\n\t\t\t\t<Line\r\n\t\t\t\t\tdata={{\r\n\t\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n\t\t\t\t\t\t\t\tborderColor: '#CC1034',\r\n\t\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t}}\r\n\t\t\t\t\toptions={options}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport InfoBox from './components/InfoBox';\nimport Map from './components/Map/Map';\nimport Table from './components/SidePanel/Table';\nimport LineGraph from './components/SidePanel/LineGraph';\nimport { sortData, printStat, printStatTotal } from './util';\nimport {\n\tMenuItem,\n\tFormControl,\n\tSelect,\n\tCard,\n\tCardContent,\n} from '@material-ui/core';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nfunction App() {\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState('worldWide');\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({ lat: 34.8074, lng: 40.4796 });\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState('cases');\n\n\t// https://disease.sh/v3/covid-19/countries\n\n\t// userEffect = runs piece of code base on given condition\n\t// will only run once as component loads and will not run again\n\n\tuseEffect(() => {\n\t\tfetch('https://disease.sh/v3/covid-19/all')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// async sends  request , and wait for it  so use aync\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/countries')\n\t\t\t\t.then((response) => response.json()) //gets the data in a json formant\n\t\t\t\t.then((data) => {\n\t\t\t\t\t//what to do with data\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country, //countrynamebasedonAPi\n\t\t\t\t\t\tvalue: country.countryInfo.iso2, //country shortcut name\n\t\t\t\t\t}));\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\t\tgetCountriesData();\n\t}, []);\n\n\tconst onCountryChange = (event) => {\n\t\tconst countryCode = event.target.value;\n\t\t// console.log('countrryyy codee', countryCode);\n\t\tsetCountry(countryCode);\n\n\t\tconst url =\n\t\t\tcountryCode === 'worldWide'\n\t\t\t\t? 'https://disease.sh/v3/covid-19/all'\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\t\tfetch(url)\n\t\t\t.then((response) => response.json()) //turns it into data text\n\t\t\t.then((data) => {\n\t\t\t\t// use data to do\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\tsetMapZoom(4);\n\t\t\t});\n\t};\n\n\tconsole.log('countryInfo >>>', countryInfo);\n\n\treturn (\n\t\t// using bem a //HEADER\n\t\t<div className='app'>\n\t\t\t<div className='app__left'>\n\t\t\t\t<div className='app__header'>\n\t\t\t\t\t<h1>EyeForCovid</h1>\n\t\t\t\t\t<FormControl className='app__dropdown'>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t\tvalue={country}>\n\t\t\t\t\t\t\t<MenuItem value='worldWide'>Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country, key = 'idx') => (\n\t\t\t\t\t\t\t\t<MenuItem key={key} value={country.value}>\n\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t{/* 3 mid panel */}\n\t\t\t\t{/* <h3>as of Today</h3> */}\n\t\t\t\t<div className='app__stats'>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('cases')}\n\t\t\t\t\t\ttitle='Cases'\n\t\t\t\t\t\tcases={printStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={printStatTotal(countryInfo.cases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('recovered')}\n\t\t\t\t\t\ttitle='Recovered'\n\t\t\t\t\t\tcases={printStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={printStatTotal(countryInfo.recovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('deaths')}\n\t\t\t\t\t\ttitle='Deaths'\n\t\t\t\t\t\tcases={printStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={printStatTotal(countryInfo.deaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/* map */}\n\t\t\t\t<Map\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<Card className='app__right'>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3>worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph className='app__graph' casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}